// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotificationService.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NotificationService.Infrastructure.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20250409211042_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("BaseEntitySequence");

            modelBuilder.Entity("NotificationService.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasDefaultValueSql("nextval('\"BaseEntitySequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.RecipientEntity", b =>
                {
                    b.HasBaseType("NotificationService.Domain.Entities.BaseEntity");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_type");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("ErrorText")
                        .HasColumnType("text")
                        .HasColumnName("error_text");

                    b.Property<string>("SendingStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("None")
                        .HasColumnName("sending_status");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.HasIndex("TaskId");

                    b.ToTable("recipients", (string)null);
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.TaskEntity", b =>
                {
                    b.HasBaseType("NotificationService.Domain.Entities.BaseEntity");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("MustBeginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("must_begin_at");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.RecipientEntity", b =>
                {
                    b.HasOne("NotificationService.Domain.Entities.TaskEntity", "Task")
                        .WithMany("Recipients")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Recipients_Tasks");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.TaskEntity", b =>
                {
                    b.OwnsOne("NotificationService.Domain.ValueObjects.ContentValueObject", "Content", b1 =>
                        {
                            b1.Property<long>("TaskEntityId")
                                .HasColumnType("bigint");

                            b1.Property<string>("JsonContent")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("json_content");

                            b1.HasKey("TaskEntityId");

                            b1.ToTable("tasks");

                            b1.WithOwner()
                                .HasForeignKey("TaskEntityId");
                        });

                    b.Navigation("Content")
                        .IsRequired();
                });

            modelBuilder.Entity("NotificationService.Domain.Entities.TaskEntity", b =>
                {
                    b.Navigation("Recipients");
                });
#pragma warning restore 612, 618
        }
    }
}
